// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpaxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mpaxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mpaxos {

namespace {

const ::google::protobuf::Descriptor* MsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPrepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPrepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAckPrepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAckPrepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAckAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAckAccept_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mpaxos_2eproto() {
  protobuf_AddDesc_mpaxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mpaxos.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHeader_descriptor_ = file->message_type(0);
  static const int MsgHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, slot_id_),
  };
  MsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeader_descriptor_,
      MsgHeader::default_instance_,
      MsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeader));
  PropValue_descriptor_ = file->message_type(1);
  static const int PropValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, data_),
  };
  PropValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropValue_descriptor_,
      PropValue::default_instance_,
      PropValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropValue));
  MsgPrepare_descriptor_ = file->message_type(2);
  static const int MsgPrepare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, ballot_id_),
  };
  MsgPrepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPrepare_descriptor_,
      MsgPrepare::default_instance_,
      MsgPrepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPrepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPrepare));
  MsgAckPrepare_descriptor_ = file->message_type(3);
  static const int MsgAckPrepare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, max_ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, max_prop_value_),
  };
  MsgAckPrepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAckPrepare_descriptor_,
      MsgAckPrepare::default_instance_,
      MsgAckPrepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckPrepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAckPrepare));
  MsgAccept_descriptor_ = file->message_type(4);
  static const int MsgAccept_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, prop_value_),
  };
  MsgAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAccept_descriptor_,
      MsgAccept::default_instance_,
      MsgAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAccept));
  MsgAckAccept_descriptor_ = file->message_type(5);
  static const int MsgAckAccept_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, reply_),
  };
  MsgAckAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAckAccept_descriptor_,
      MsgAckAccept::default_instance_,
      MsgAckAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAckAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAckAccept));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mpaxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeader_descriptor_, &MsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropValue_descriptor_, &PropValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPrepare_descriptor_, &MsgPrepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAckPrepare_descriptor_, &MsgAckPrepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAccept_descriptor_, &MsgAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAckAccept_descriptor_, &MsgAckAccept::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mpaxos_2eproto() {
  delete MsgHeader::default_instance_;
  delete MsgHeader_reflection_;
  delete PropValue::default_instance_;
  delete PropValue_reflection_;
  delete MsgPrepare::default_instance_;
  delete MsgPrepare_reflection_;
  delete MsgAckPrepare::default_instance_;
  delete MsgAckPrepare_reflection_;
  delete MsgAccept::default_instance_;
  delete MsgAccept_reflection_;
  delete MsgAckAccept::default_instance_;
  delete MsgAckAccept_reflection_;
}

void protobuf_AddDesc_mpaxos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mpaxos.proto\022\006mpaxos\"P\n\tMsgHeader\022!\n\010m"
    "sg_type\030\001 \002(\0162\017.mpaxos.MsgType\022\017\n\007node_i"
    "d\030\002 \002(\r\022\017\n\007slot_id\030\003 \002(\004\"%\n\tPropValue\022\n\n"
    "\002id\030\001 \002(\004\022\014\n\004data\030\002 \002(\t\"F\n\nMsgPrepare\022%\n"
    "\nmsg_header\030\001 \002(\0132\021.mpaxos.MsgHeader\022\021\n\t"
    "ballot_id\030\002 \002(\004\"\232\001\n\rMsgAckPrepare\022%\n\nmsg"
    "_header\030\001 \002(\0132\021.mpaxos.MsgHeader\022\021\n\tball"
    "ot_id\030\002 \002(\004\022\r\n\005reply\030\003 \002(\010\022\025\n\rmax_ballot"
    "_id\030\004 \002(\004\022)\n\016max_prop_value\030\005 \001(\0132\021.mpax"
    "os.PropValue\"l\n\tMsgAccept\022%\n\nmsg_header\030"
    "\001 \002(\0132\021.mpaxos.MsgHeader\022\021\n\tballot_id\030\002 "
    "\002(\004\022%\n\nprop_value\030\003 \002(\0132\021.mpaxos.PropVal"
    "ue\"W\n\014MsgAckAccept\022%\n\nmsg_header\030\001 \002(\0132\021"
    ".mpaxos.MsgHeader\022\021\n\tballot_id\030\002 \002(\004\022\r\n\005"
    "reply\030\003 \002(\010*^\n\007MsgType\022\013\n\007PREPARE\020\000\022\013\n\007P"
    "ROMISE\020\001\022\n\n\006ACCEPT\020\002\022\014\n\010ACCEPTED\020\003\022\t\n\005LE"
    "ARN\020\004\022\n\n\006DECIDE\020\005\022\010\n\004SLOT\020\006", 667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mpaxos.proto", &protobuf_RegisterTypes);
  MsgHeader::default_instance_ = new MsgHeader();
  PropValue::default_instance_ = new PropValue();
  MsgPrepare::default_instance_ = new MsgPrepare();
  MsgAckPrepare::default_instance_ = new MsgAckPrepare();
  MsgAccept::default_instance_ = new MsgAccept();
  MsgAckAccept::default_instance_ = new MsgAckAccept();
  MsgHeader::default_instance_->InitAsDefaultInstance();
  PropValue::default_instance_->InitAsDefaultInstance();
  MsgPrepare::default_instance_->InitAsDefaultInstance();
  MsgAckPrepare::default_instance_->InitAsDefaultInstance();
  MsgAccept::default_instance_->InitAsDefaultInstance();
  MsgAckAccept::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mpaxos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mpaxos_2eproto {
  StaticDescriptorInitializer_mpaxos_2eproto() {
    protobuf_AddDesc_mpaxos_2eproto();
  }
} static_descriptor_initializer_mpaxos_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeader::kMsgTypeFieldNumber;
const int MsgHeader::kNodeIdFieldNumber;
const int MsgHeader::kSlotIdFieldNumber;
#endif  // !_MSC_VER

MsgHeader::MsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHeader::InitAsDefaultInstance() {
}

MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeader::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  node_id_ = 0u;
  slot_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeader::~MsgHeader() {
  SharedDtor();
}

void MsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeader_descriptor_;
}

const MsgHeader& MsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

MsgHeader* MsgHeader::default_instance_ = NULL;

MsgHeader* MsgHeader::New() const {
  return new MsgHeader;
}

void MsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    node_id_ = 0u;
    slot_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgType msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpaxos::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::mpaxos::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // required uint32 node_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // required uint64 slot_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required uint32 node_id = 2;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_id(), output);
  }

  // required uint64 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required uint32 node_id = 2;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_id(), target);
  }

  // required uint64 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required uint32 node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // required uint64 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(node_id_, other->node_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeader_descriptor_;
  metadata.reflection = MsgHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropValue::kIdFieldNumber;
const int PropValue::kDataFieldNumber;
#endif  // !_MSC_VER

PropValue::PropValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropValue::InitAsDefaultInstance() {
}

PropValue::PropValue(const PropValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropValue::~PropValue() {
  SharedDtor();
}

void PropValue::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PropValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropValue_descriptor_;
}

const PropValue& PropValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

PropValue* PropValue::default_instance_ = NULL;

PropValue* PropValue::New() const {
  return new PropValue;
}

void PropValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropValue::MergeFrom(const PropValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropValue::CopyFrom(const PropValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropValue::Swap(PropValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropValue_descriptor_;
  metadata.reflection = PropValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPrepare::kMsgHeaderFieldNumber;
const int MsgPrepare::kBallotIdFieldNumber;
#endif  // !_MSC_VER

MsgPrepare::MsgPrepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPrepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::MsgHeader*>(&::mpaxos::MsgHeader::default_instance());
}

MsgPrepare::MsgPrepare(const MsgPrepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPrepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPrepare::~MsgPrepare() {
  SharedDtor();
}

void MsgPrepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPrepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPrepare_descriptor_;
}

const MsgPrepare& MsgPrepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

MsgPrepare* MsgPrepare::default_instance_ = NULL;

MsgPrepare* MsgPrepare::New() const {
  return new MsgPrepare;
}

void MsgPrepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPrepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPrepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgHeader msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required uint64 ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ballot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPrepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPrepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPrepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPrepare::MergeFrom(const MsgPrepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPrepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPrepare::CopyFrom(const MsgPrepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  return true;
}

void MsgPrepare::Swap(MsgPrepare* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPrepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPrepare_descriptor_;
  metadata.reflection = MsgPrepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAckPrepare::kMsgHeaderFieldNumber;
const int MsgAckPrepare::kBallotIdFieldNumber;
const int MsgAckPrepare::kReplyFieldNumber;
const int MsgAckPrepare::kMaxBallotIdFieldNumber;
const int MsgAckPrepare::kMaxPropValueFieldNumber;
#endif  // !_MSC_VER

MsgAckPrepare::MsgAckPrepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgAckPrepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::MsgHeader*>(&::mpaxos::MsgHeader::default_instance());
  max_prop_value_ = const_cast< ::mpaxos::PropValue*>(&::mpaxos::PropValue::default_instance());
}

MsgAckPrepare::MsgAckPrepare(const MsgAckPrepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgAckPrepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  reply_ = false;
  max_ballot_id_ = GOOGLE_ULONGLONG(0);
  max_prop_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAckPrepare::~MsgAckPrepare() {
  SharedDtor();
}

void MsgAckPrepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete max_prop_value_;
  }
}

void MsgAckPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAckPrepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAckPrepare_descriptor_;
}

const MsgAckPrepare& MsgAckPrepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

MsgAckPrepare* MsgAckPrepare::default_instance_ = NULL;

MsgAckPrepare* MsgAckPrepare::New() const {
  return new MsgAckPrepare;
}

void MsgAckPrepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
    reply_ = false;
    max_ballot_id_ = GOOGLE_ULONGLONG(0);
    if (has_max_prop_value()) {
      if (max_prop_value_ != NULL) max_prop_value_->::mpaxos::PropValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAckPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // required bool reply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_ballot_id;
        break;
      }

      // required uint64 max_ballot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_ballot_id_)));
          set_has_max_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_max_prop_value;
        break;
      }

      // optional .mpaxos.PropValue max_prop_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_prop_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAckPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required bool reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reply(), output);
  }

  // required uint64 max_ballot_id = 4;
  if (has_max_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_ballot_id(), output);
  }

  // optional .mpaxos.PropValue max_prop_value = 5;
  if (has_max_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->max_prop_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAckPrepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required bool reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reply(), target);
  }

  // required uint64 max_ballot_id = 4;
  if (has_max_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_ballot_id(), target);
  }

  // optional .mpaxos.PropValue max_prop_value = 5;
  if (has_max_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->max_prop_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAckPrepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgHeader msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required uint64 ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ballot_id());
    }

    // required bool reply = 3;
    if (has_reply()) {
      total_size += 1 + 1;
    }

    // required uint64 max_ballot_id = 4;
    if (has_max_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_ballot_id());
    }

    // optional .mpaxos.PropValue max_prop_value = 5;
    if (has_max_prop_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_prop_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAckPrepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAckPrepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAckPrepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAckPrepare::MergeFrom(const MsgAckPrepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_max_ballot_id()) {
      set_max_ballot_id(from.max_ballot_id());
    }
    if (from.has_max_prop_value()) {
      mutable_max_prop_value()->::mpaxos::PropValue::MergeFrom(from.max_prop_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAckPrepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAckPrepare::CopyFrom(const MsgAckPrepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAckPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_max_prop_value()) {
    if (!this->max_prop_value().IsInitialized()) return false;
  }
  return true;
}

void MsgAckPrepare::Swap(MsgAckPrepare* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(reply_, other->reply_);
    std::swap(max_ballot_id_, other->max_ballot_id_);
    std::swap(max_prop_value_, other->max_prop_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAckPrepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAckPrepare_descriptor_;
  metadata.reflection = MsgAckPrepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAccept::kMsgHeaderFieldNumber;
const int MsgAccept::kBallotIdFieldNumber;
const int MsgAccept::kPropValueFieldNumber;
#endif  // !_MSC_VER

MsgAccept::MsgAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgAccept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::MsgHeader*>(&::mpaxos::MsgHeader::default_instance());
  prop_value_ = const_cast< ::mpaxos::PropValue*>(&::mpaxos::PropValue::default_instance());
}

MsgAccept::MsgAccept(const MsgAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgAccept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  prop_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAccept::~MsgAccept() {
  SharedDtor();
}

void MsgAccept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete prop_value_;
  }
}

void MsgAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAccept_descriptor_;
}

const MsgAccept& MsgAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

MsgAccept* MsgAccept::default_instance_ = NULL;

MsgAccept* MsgAccept::New() const {
  return new MsgAccept;
}

void MsgAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
    if (has_prop_value()) {
      if (prop_value_ != NULL) prop_value_->::mpaxos::PropValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prop_value;
        break;
      }

      // required .mpaxos.PropValue prop_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required .mpaxos.PropValue prop_value = 3;
  if (has_prop_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prop_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required .mpaxos.PropValue prop_value = 3;
  if (has_prop_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prop_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgHeader msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required uint64 ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ballot_id());
    }

    // required .mpaxos.PropValue prop_value = 3;
    if (has_prop_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAccept::MergeFrom(const MsgAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_prop_value()) {
      mutable_prop_value()->::mpaxos::PropValue::MergeFrom(from.prop_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAccept::CopyFrom(const MsgAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_prop_value()) {
    if (!this->prop_value().IsInitialized()) return false;
  }
  return true;
}

void MsgAccept::Swap(MsgAccept* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(prop_value_, other->prop_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAccept_descriptor_;
  metadata.reflection = MsgAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAckAccept::kMsgHeaderFieldNumber;
const int MsgAckAccept::kBallotIdFieldNumber;
const int MsgAckAccept::kReplyFieldNumber;
#endif  // !_MSC_VER

MsgAckAccept::MsgAckAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgAckAccept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::MsgHeader*>(&::mpaxos::MsgHeader::default_instance());
}

MsgAckAccept::MsgAckAccept(const MsgAckAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgAckAccept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  ballot_id_ = GOOGLE_ULONGLONG(0);
  reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAckAccept::~MsgAckAccept() {
  SharedDtor();
}

void MsgAckAccept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
  }
}

void MsgAckAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAckAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAckAccept_descriptor_;
}

const MsgAckAccept& MsgAckAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

MsgAckAccept* MsgAckAccept::default_instance_ = NULL;

MsgAckAccept* MsgAckAccept::New() const {
  return new MsgAckAccept;
}

void MsgAckAccept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
    }
    ballot_id_ = GOOGLE_ULONGLONG(0);
    reply_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAckAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgHeader msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reply;
        break;
      }

      // required bool reply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAckAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  // required bool reply = 3;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAckAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgHeader msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  // required bool reply = 3;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAckAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgHeader msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required uint64 ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ballot_id());
    }

    // required bool reply = 3;
    if (has_reply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAckAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAckAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAckAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAckAccept::MergeFrom(const MsgAckAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::MsgHeader::MergeFrom(from.msg_header());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAckAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAckAccept::CopyFrom(const MsgAckAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAckAccept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  return true;
}

void MsgAckAccept::Swap(MsgAckAccept* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAckAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAckAccept_descriptor_;
  metadata.reflection = MsgAckAccept_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpaxos

// @@protoc_insertion_point(global_scope)
