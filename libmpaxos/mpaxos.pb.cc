// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpaxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mpaxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mpaxos {

namespace {

const ::google::protobuf::Descriptor* Msg_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Round_id_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Round_id_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proposal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proposal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ack_prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ack_prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_accept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_accept_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ack_accept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ack_accept_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgAck_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mpaxos_2eproto() {
  protobuf_AddDesc_mpaxos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mpaxos.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_header_descriptor_ = file->message_type(0);
  static const int Msg_header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_header, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_header, host_name_),
  };
  Msg_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_header_descriptor_,
      Msg_header::default_instance_,
      Msg_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_header));
  Round_id_descriptor_ = file->message_type(1);
  static const int Round_id_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round_id, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round_id, ballot_id_),
  };
  Round_id_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Round_id_descriptor_,
      Round_id::default_instance_,
      Round_id_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round_id, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round_id, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Round_id));
  Proposal_descriptor_ = file->message_type(2);
  static const int Proposal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, value_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, value_),
  };
  Proposal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proposal_descriptor_,
      Proposal::default_instance_,
      Proposal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proposal));
  Msg_prepare_descriptor_ = file->message_type(3);
  static const int Msg_prepare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_prepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_prepare, round_id_),
  };
  Msg_prepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_prepare_descriptor_,
      Msg_prepare::default_instance_,
      Msg_prepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_prepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_prepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_prepare));
  Msg_ack_prepare_descriptor_ = file->message_type(4);
  static const int Msg_ack_prepare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, round_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, max_ballot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, proposal_),
  };
  Msg_ack_prepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ack_prepare_descriptor_,
      Msg_ack_prepare::default_instance_,
      Msg_ack_prepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_prepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ack_prepare));
  Msg_accept_descriptor_ = file->message_type(5);
  static const int Msg_accept_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_accept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_accept, round_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_accept, proposal_),
  };
  Msg_accept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_accept_descriptor_,
      Msg_accept::default_instance_,
      Msg_accept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_accept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_accept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_accept));
  Msg_ack_accept_descriptor_ = file->message_type(6);
  static const int Msg_ack_accept_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, msg_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, round_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, max_ballot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, proposal_),
  };
  Msg_ack_accept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ack_accept_descriptor_,
      Msg_ack_accept::default_instance_,
      Msg_ack_accept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ack_accept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ack_accept));
  MsgType_descriptor_ = file->enum_type(0);
  MsgAck_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mpaxos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_header_descriptor_, &Msg_header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Round_id_descriptor_, &Round_id::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proposal_descriptor_, &Proposal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_prepare_descriptor_, &Msg_prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ack_prepare_descriptor_, &Msg_ack_prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_accept_descriptor_, &Msg_accept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ack_accept_descriptor_, &Msg_ack_accept::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mpaxos_2eproto() {
  delete Msg_header::default_instance_;
  delete Msg_header_reflection_;
  delete Round_id::default_instance_;
  delete Round_id_reflection_;
  delete Proposal::default_instance_;
  delete Proposal_reflection_;
  delete Msg_prepare::default_instance_;
  delete Msg_prepare_reflection_;
  delete Msg_ack_prepare::default_instance_;
  delete Msg_ack_prepare_reflection_;
  delete Msg_accept::default_instance_;
  delete Msg_accept_reflection_;
  delete Msg_ack_accept::default_instance_;
  delete Msg_ack_accept_reflection_;
}

void protobuf_AddDesc_mpaxos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mpaxos.proto\022\006mpaxos\"B\n\nMsg_header\022!\n\010"
    "msg_type\030\001 \002(\0162\017.mpaxos.MsgType\022\021\n\thost_"
    "name\030\002 \002(\t\".\n\010Round_id\022\017\n\007slot_id\030\001 \002(\004\022"
    "\021\n\tballot_id\030\002 \002(\004\"9\n\010Proposal\022\014\n\004type\030\001"
    " \002(\004\022\020\n\010value_id\030\002 \002(\r\022\r\n\005value\030\003 \002(\t\"Y\n"
    "\013Msg_prepare\022&\n\nmsg_header\030\001 \002(\0132\022.mpaxo"
    "s.Msg_header\022\"\n\010round_id\030\002 \002(\0132\020.mpaxos."
    "Round_id\"\262\001\n\017Msg_ack_prepare\022&\n\nmsg_head"
    "er\030\001 \002(\0132\022.mpaxos.Msg_header\022\"\n\010round_id"
    "\030\002 \002(\0132\020.mpaxos.Round_id\022\033\n\003ack\030\003 \002(\0162\016."
    "mpaxos.MsgAck\022\022\n\nmax_ballot\030\004 \002(\004\022\"\n\010pro"
    "posal\030\005 \001(\0132\020.mpaxos.Proposal\"|\n\nMsg_acc"
    "ept\022&\n\nmsg_header\030\001 \002(\0132\022.mpaxos.Msg_hea"
    "der\022\"\n\010round_id\030\002 \002(\0132\020.mpaxos.Round_id\022"
    "\"\n\010proposal\030\003 \002(\0132\020.mpaxos.Proposal\"\261\001\n\016"
    "Msg_ack_accept\022&\n\nmsg_header\030\001 \002(\0132\022.mpa"
    "xos.Msg_header\022\"\n\010round_id\030\002 \002(\0132\020.mpaxo"
    "s.Round_id\022\033\n\003ack\030\003 \002(\0162\016.mpaxos.MsgAck\022"
    "\022\n\nmax_ballot\030\004 \002(\004\022\"\n\010proposal\030\005 \001(\0132\020."
    "mpaxos.Proposal*^\n\007MsgType\022\013\n\007PREPARE\020\000\022"
    "\013\n\007PROMISE\020\001\022\n\n\006ACCEPT\020\002\022\014\n\010ACCEPTED\020\003\022\t"
    "\n\005LEARN\020\004\022\n\n\006DECIDE\020\005\022\010\n\004SLOT\020\006*\031\n\006MsgAc"
    "k\022\007\n\003YES\020\000\022\006\n\002NO\020\001", 898);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mpaxos.proto", &protobuf_RegisterTypes);
  Msg_header::default_instance_ = new Msg_header();
  Round_id::default_instance_ = new Round_id();
  Proposal::default_instance_ = new Proposal();
  Msg_prepare::default_instance_ = new Msg_prepare();
  Msg_ack_prepare::default_instance_ = new Msg_ack_prepare();
  Msg_accept::default_instance_ = new Msg_accept();
  Msg_ack_accept::default_instance_ = new Msg_ack_accept();
  Msg_header::default_instance_->InitAsDefaultInstance();
  Round_id::default_instance_->InitAsDefaultInstance();
  Proposal::default_instance_->InitAsDefaultInstance();
  Msg_prepare::default_instance_->InitAsDefaultInstance();
  Msg_ack_prepare::default_instance_->InitAsDefaultInstance();
  Msg_accept::default_instance_->InitAsDefaultInstance();
  Msg_ack_accept::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mpaxos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mpaxos_2eproto {
  StaticDescriptorInitializer_mpaxos_2eproto() {
    protobuf_AddDesc_mpaxos_2eproto();
  }
} static_descriptor_initializer_mpaxos_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgAck_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAck_descriptor_;
}
bool MsgAck_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_header::kMsgTypeFieldNumber;
const int Msg_header::kHostNameFieldNumber;
#endif  // !_MSC_VER

Msg_header::Msg_header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_header::InitAsDefaultInstance() {
}

Msg_header::Msg_header(const Msg_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_header::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_header::~Msg_header() {
  SharedDtor();
}

void Msg_header::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void Msg_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_header_descriptor_;
}

const Msg_header& Msg_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Msg_header* Msg_header::default_instance_ = NULL;

Msg_header* Msg_header::New() const {
  return new Msg_header;
}

void Msg_header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.MsgType msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpaxos::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::mpaxos::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // required string host_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required string host_name = 2;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_header::MergeFrom(const Msg_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_header::CopyFrom(const Msg_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_header::Swap(Msg_header* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(host_name_, other->host_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_header_descriptor_;
  metadata.reflection = Msg_header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Round_id::kSlotIdFieldNumber;
const int Round_id::kBallotIdFieldNumber;
#endif  // !_MSC_VER

Round_id::Round_id()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Round_id::InitAsDefaultInstance() {
}

Round_id::Round_id(const Round_id& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Round_id::SharedCtor() {
  _cached_size_ = 0;
  slot_id_ = GOOGLE_ULONGLONG(0);
  ballot_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Round_id::~Round_id() {
  SharedDtor();
}

void Round_id::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Round_id::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Round_id::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Round_id_descriptor_;
}

const Round_id& Round_id::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Round_id* Round_id::default_instance_ = NULL;

Round_id* Round_id::New() const {
  return new Round_id;
}

void Round_id::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_id_ = GOOGLE_ULONGLONG(0);
    ballot_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Round_id::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 slot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ballot_id;
        break;
      }

      // required uint64 ballot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ballot_id_)));
          set_has_ballot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Round_id::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 slot_id = 1;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->slot_id(), output);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ballot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Round_id::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 slot_id = 1;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->slot_id(), target);
  }

  // required uint64 ballot_id = 2;
  if (has_ballot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ballot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Round_id::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->slot_id());
    }

    // required uint64 ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ballot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Round_id::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Round_id* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Round_id*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Round_id::MergeFrom(const Round_id& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Round_id::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round_id::CopyFrom(const Round_id& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round_id::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Round_id::Swap(Round_id* other) {
  if (other != this) {
    std::swap(slot_id_, other->slot_id_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Round_id::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Round_id_descriptor_;
  metadata.reflection = Round_id_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proposal::kTypeFieldNumber;
const int Proposal::kValueIdFieldNumber;
const int Proposal::kValueFieldNumber;
#endif  // !_MSC_VER

Proposal::Proposal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proposal::InitAsDefaultInstance() {
}

Proposal::Proposal(const Proposal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proposal::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  value_id_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proposal::~Proposal() {
  SharedDtor();
}

void Proposal::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Proposal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proposal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proposal_descriptor_;
}

const Proposal& Proposal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Proposal* Proposal::default_instance_ = NULL;

Proposal* Proposal::New() const {
  return new Proposal;
}

void Proposal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
    value_id_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value_id;
        break;
      }

      // required uint32 value_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_id_)));
          set_has_value_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // required uint32 value_id = 2;
  if (has_value_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value_id(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proposal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  // required uint32 value_id = 2;
  if (has_value_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value_id(), target);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proposal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }

    // required uint32 value_id = 2;
    if (has_value_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_id());
    }

    // required string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proposal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proposal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proposal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value_id()) {
      set_value_id(from.value_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proposal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Proposal::Swap(Proposal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_id_, other->value_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proposal_descriptor_;
  metadata.reflection = Proposal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_prepare::kMsgHeaderFieldNumber;
const int Msg_prepare::kRoundIdFieldNumber;
#endif  // !_MSC_VER

Msg_prepare::Msg_prepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_prepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::Msg_header*>(&::mpaxos::Msg_header::default_instance());
  round_id_ = const_cast< ::mpaxos::Round_id*>(&::mpaxos::Round_id::default_instance());
}

Msg_prepare::Msg_prepare(const Msg_prepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_prepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  round_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_prepare::~Msg_prepare() {
  SharedDtor();
}

void Msg_prepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete round_id_;
  }
}

void Msg_prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_prepare_descriptor_;
}

const Msg_prepare& Msg_prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Msg_prepare* Msg_prepare::default_instance_ = NULL;

Msg_prepare* Msg_prepare::New() const {
  return new Msg_prepare;
}

void Msg_prepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::Msg_header::Clear();
    }
    if (has_round_id()) {
      if (round_id_ != NULL) round_id_->::mpaxos::Round_id::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.Msg_header msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_round_id;
        break;
      }

      // required .mpaxos.Round_id round_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_round_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->round_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_prepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->round_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_prepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.Msg_header msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required .mpaxos.Round_id round_id = 2;
    if (has_round_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->round_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_prepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_prepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_prepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_prepare::MergeFrom(const Msg_prepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::Msg_header::MergeFrom(from.msg_header());
    }
    if (from.has_round_id()) {
      mutable_round_id()->::mpaxos::Round_id::MergeFrom(from.round_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_prepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_prepare::CopyFrom(const Msg_prepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_round_id()) {
    if (!this->round_id().IsInitialized()) return false;
  }
  return true;
}

void Msg_prepare::Swap(Msg_prepare* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(round_id_, other->round_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_prepare_descriptor_;
  metadata.reflection = Msg_prepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ack_prepare::kMsgHeaderFieldNumber;
const int Msg_ack_prepare::kRoundIdFieldNumber;
const int Msg_ack_prepare::kAckFieldNumber;
const int Msg_ack_prepare::kMaxBallotFieldNumber;
const int Msg_ack_prepare::kProposalFieldNumber;
#endif  // !_MSC_VER

Msg_ack_prepare::Msg_ack_prepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ack_prepare::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::Msg_header*>(&::mpaxos::Msg_header::default_instance());
  round_id_ = const_cast< ::mpaxos::Round_id*>(&::mpaxos::Round_id::default_instance());
  proposal_ = const_cast< ::mpaxos::Proposal*>(&::mpaxos::Proposal::default_instance());
}

Msg_ack_prepare::Msg_ack_prepare(const Msg_ack_prepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ack_prepare::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  round_id_ = NULL;
  ack_ = 0;
  max_ballot_ = GOOGLE_ULONGLONG(0);
  proposal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ack_prepare::~Msg_ack_prepare() {
  SharedDtor();
}

void Msg_ack_prepare::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete round_id_;
    delete proposal_;
  }
}

void Msg_ack_prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ack_prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ack_prepare_descriptor_;
}

const Msg_ack_prepare& Msg_ack_prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Msg_ack_prepare* Msg_ack_prepare::default_instance_ = NULL;

Msg_ack_prepare* Msg_ack_prepare::New() const {
  return new Msg_ack_prepare;
}

void Msg_ack_prepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::Msg_header::Clear();
    }
    if (has_round_id()) {
      if (round_id_ != NULL) round_id_->::mpaxos::Round_id::Clear();
    }
    ack_ = 0;
    max_ballot_ = GOOGLE_ULONGLONG(0);
    if (has_proposal()) {
      if (proposal_ != NULL) proposal_->::mpaxos::Proposal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ack_prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.Msg_header msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_round_id;
        break;
      }

      // required .mpaxos.Round_id round_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_round_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ack;
        break;
      }

      // required .mpaxos.MsgAck ack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpaxos::MsgAck_IsValid(value)) {
            set_ack(static_cast< ::mpaxos::MsgAck >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_ballot;
        break;
      }

      // required uint64 max_ballot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_ballot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_ballot_)));
          set_has_max_ballot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_proposal;
        break;
      }

      // optional .mpaxos.Proposal proposal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proposal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ack_prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->round_id(), output);
  }

  // required .mpaxos.MsgAck ack = 3;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ack(), output);
  }

  // required uint64 max_ballot = 4;
  if (has_max_ballot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_ballot(), output);
  }

  // optional .mpaxos.Proposal proposal = 5;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->proposal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ack_prepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->round_id(), target);
  }

  // required .mpaxos.MsgAck ack = 3;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ack(), target);
  }

  // required uint64 max_ballot = 4;
  if (has_max_ballot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_ballot(), target);
  }

  // optional .mpaxos.Proposal proposal = 5;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->proposal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ack_prepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.Msg_header msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required .mpaxos.Round_id round_id = 2;
    if (has_round_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->round_id());
    }

    // required .mpaxos.MsgAck ack = 3;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ack());
    }

    // required uint64 max_ballot = 4;
    if (has_max_ballot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_ballot());
    }

    // optional .mpaxos.Proposal proposal = 5;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proposal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ack_prepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ack_prepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ack_prepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ack_prepare::MergeFrom(const Msg_ack_prepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::Msg_header::MergeFrom(from.msg_header());
    }
    if (from.has_round_id()) {
      mutable_round_id()->::mpaxos::Round_id::MergeFrom(from.round_id());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_max_ballot()) {
      set_max_ballot(from.max_ballot());
    }
    if (from.has_proposal()) {
      mutable_proposal()->::mpaxos::Proposal::MergeFrom(from.proposal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ack_prepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ack_prepare::CopyFrom(const Msg_ack_prepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ack_prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_round_id()) {
    if (!this->round_id().IsInitialized()) return false;
  }
  if (has_proposal()) {
    if (!this->proposal().IsInitialized()) return false;
  }
  return true;
}

void Msg_ack_prepare::Swap(Msg_ack_prepare* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(round_id_, other->round_id_);
    std::swap(ack_, other->ack_);
    std::swap(max_ballot_, other->max_ballot_);
    std::swap(proposal_, other->proposal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ack_prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ack_prepare_descriptor_;
  metadata.reflection = Msg_ack_prepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_accept::kMsgHeaderFieldNumber;
const int Msg_accept::kRoundIdFieldNumber;
const int Msg_accept::kProposalFieldNumber;
#endif  // !_MSC_VER

Msg_accept::Msg_accept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_accept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::Msg_header*>(&::mpaxos::Msg_header::default_instance());
  round_id_ = const_cast< ::mpaxos::Round_id*>(&::mpaxos::Round_id::default_instance());
  proposal_ = const_cast< ::mpaxos::Proposal*>(&::mpaxos::Proposal::default_instance());
}

Msg_accept::Msg_accept(const Msg_accept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_accept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  round_id_ = NULL;
  proposal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_accept::~Msg_accept() {
  SharedDtor();
}

void Msg_accept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete round_id_;
    delete proposal_;
  }
}

void Msg_accept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_accept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_accept_descriptor_;
}

const Msg_accept& Msg_accept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Msg_accept* Msg_accept::default_instance_ = NULL;

Msg_accept* Msg_accept::New() const {
  return new Msg_accept;
}

void Msg_accept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::Msg_header::Clear();
    }
    if (has_round_id()) {
      if (round_id_ != NULL) round_id_->::mpaxos::Round_id::Clear();
    }
    if (has_proposal()) {
      if (proposal_ != NULL) proposal_->::mpaxos::Proposal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_accept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.Msg_header msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_round_id;
        break;
      }

      // required .mpaxos.Round_id round_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_round_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proposal;
        break;
      }

      // required .mpaxos.Proposal proposal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proposal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_accept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->round_id(), output);
  }

  // required .mpaxos.Proposal proposal = 3;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proposal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_accept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->round_id(), target);
  }

  // required .mpaxos.Proposal proposal = 3;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proposal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_accept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.Msg_header msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required .mpaxos.Round_id round_id = 2;
    if (has_round_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->round_id());
    }

    // required .mpaxos.Proposal proposal = 3;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proposal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_accept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_accept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_accept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_accept::MergeFrom(const Msg_accept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::Msg_header::MergeFrom(from.msg_header());
    }
    if (from.has_round_id()) {
      mutable_round_id()->::mpaxos::Round_id::MergeFrom(from.round_id());
    }
    if (from.has_proposal()) {
      mutable_proposal()->::mpaxos::Proposal::MergeFrom(from.proposal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_accept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_accept::CopyFrom(const Msg_accept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_accept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_round_id()) {
    if (!this->round_id().IsInitialized()) return false;
  }
  if (has_proposal()) {
    if (!this->proposal().IsInitialized()) return false;
  }
  return true;
}

void Msg_accept::Swap(Msg_accept* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(round_id_, other->round_id_);
    std::swap(proposal_, other->proposal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_accept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_accept_descriptor_;
  metadata.reflection = Msg_accept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ack_accept::kMsgHeaderFieldNumber;
const int Msg_ack_accept::kRoundIdFieldNumber;
const int Msg_ack_accept::kAckFieldNumber;
const int Msg_ack_accept::kMaxBallotFieldNumber;
const int Msg_ack_accept::kProposalFieldNumber;
#endif  // !_MSC_VER

Msg_ack_accept::Msg_ack_accept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ack_accept::InitAsDefaultInstance() {
  msg_header_ = const_cast< ::mpaxos::Msg_header*>(&::mpaxos::Msg_header::default_instance());
  round_id_ = const_cast< ::mpaxos::Round_id*>(&::mpaxos::Round_id::default_instance());
  proposal_ = const_cast< ::mpaxos::Proposal*>(&::mpaxos::Proposal::default_instance());
}

Msg_ack_accept::Msg_ack_accept(const Msg_ack_accept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ack_accept::SharedCtor() {
  _cached_size_ = 0;
  msg_header_ = NULL;
  round_id_ = NULL;
  ack_ = 0;
  max_ballot_ = GOOGLE_ULONGLONG(0);
  proposal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ack_accept::~Msg_ack_accept() {
  SharedDtor();
}

void Msg_ack_accept::SharedDtor() {
  if (this != default_instance_) {
    delete msg_header_;
    delete round_id_;
    delete proposal_;
  }
}

void Msg_ack_accept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ack_accept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ack_accept_descriptor_;
}

const Msg_ack_accept& Msg_ack_accept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpaxos_2eproto();
  return *default_instance_;
}

Msg_ack_accept* Msg_ack_accept::default_instance_ = NULL;

Msg_ack_accept* Msg_ack_accept::New() const {
  return new Msg_ack_accept;
}

void Msg_ack_accept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_header()) {
      if (msg_header_ != NULL) msg_header_->::mpaxos::Msg_header::Clear();
    }
    if (has_round_id()) {
      if (round_id_ != NULL) round_id_->::mpaxos::Round_id::Clear();
    }
    ack_ = 0;
    max_ballot_ = GOOGLE_ULONGLONG(0);
    if (has_proposal()) {
      if (proposal_ != NULL) proposal_->::mpaxos::Proposal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ack_accept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mpaxos.Msg_header msg_header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_round_id;
        break;
      }

      // required .mpaxos.Round_id round_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_round_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ack;
        break;
      }

      // required .mpaxos.MsgAck ack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mpaxos::MsgAck_IsValid(value)) {
            set_ack(static_cast< ::mpaxos::MsgAck >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_ballot;
        break;
      }

      // required uint64 max_ballot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_ballot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_ballot_)));
          set_has_max_ballot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_proposal;
        break;
      }

      // optional .mpaxos.Proposal proposal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proposal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ack_accept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg_header(), output);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->round_id(), output);
  }

  // required .mpaxos.MsgAck ack = 3;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ack(), output);
  }

  // required uint64 max_ballot = 4;
  if (has_max_ballot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_ballot(), output);
  }

  // optional .mpaxos.Proposal proposal = 5;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->proposal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ack_accept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mpaxos.Msg_header msg_header = 1;
  if (has_msg_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg_header(), target);
  }

  // required .mpaxos.Round_id round_id = 2;
  if (has_round_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->round_id(), target);
  }

  // required .mpaxos.MsgAck ack = 3;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ack(), target);
  }

  // required uint64 max_ballot = 4;
  if (has_max_ballot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_ballot(), target);
  }

  // optional .mpaxos.Proposal proposal = 5;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->proposal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ack_accept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mpaxos.Msg_header msg_header = 1;
    if (has_msg_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_header());
    }

    // required .mpaxos.Round_id round_id = 2;
    if (has_round_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->round_id());
    }

    // required .mpaxos.MsgAck ack = 3;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ack());
    }

    // required uint64 max_ballot = 4;
    if (has_max_ballot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_ballot());
    }

    // optional .mpaxos.Proposal proposal = 5;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proposal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ack_accept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ack_accept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ack_accept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ack_accept::MergeFrom(const Msg_ack_accept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_header()) {
      mutable_msg_header()->::mpaxos::Msg_header::MergeFrom(from.msg_header());
    }
    if (from.has_round_id()) {
      mutable_round_id()->::mpaxos::Round_id::MergeFrom(from.round_id());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_max_ballot()) {
      set_max_ballot(from.max_ballot());
    }
    if (from.has_proposal()) {
      mutable_proposal()->::mpaxos::Proposal::MergeFrom(from.proposal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ack_accept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ack_accept::CopyFrom(const Msg_ack_accept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ack_accept::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_msg_header()) {
    if (!this->msg_header().IsInitialized()) return false;
  }
  if (has_round_id()) {
    if (!this->round_id().IsInitialized()) return false;
  }
  if (has_proposal()) {
    if (!this->proposal().IsInitialized()) return false;
  }
  return true;
}

void Msg_ack_accept::Swap(Msg_ack_accept* other) {
  if (other != this) {
    std::swap(msg_header_, other->msg_header_);
    std::swap(round_id_, other->round_id_);
    std::swap(ack_, other->ack_);
    std::swap(max_ballot_, other->max_ballot_);
    std::swap(proposal_, other->proposal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ack_accept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ack_accept_descriptor_;
  metadata.reflection = Msg_ack_accept_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpaxos

// @@protoc_insertion_point(global_scope)
