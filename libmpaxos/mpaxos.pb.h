// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpaxos.proto

#ifndef PROTOBUF_mpaxos_2eproto__INCLUDED
#define PROTOBUF_mpaxos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mpaxos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mpaxos_2eproto();
void protobuf_AssignDesc_mpaxos_2eproto();
void protobuf_ShutdownFile_mpaxos_2eproto();

class MsgHeader;
class PropValue;
class MsgPrepare;
class MsgAckPrepare;
class MsgAccept;
class MsgAckAccept;

enum MsgType {
  PREPARE = 0,
  PROMISE = 1,
  ACCEPT = 2,
  ACCEPTED = 3,
  LEARN = 4,
  DECIDE = 5,
  SLOT = 6
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = PREPARE;
const MsgType MsgType_MAX = SLOT;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class MsgHeader : public ::google::protobuf::Message {
 public:
  MsgHeader();
  virtual ~MsgHeader();

  MsgHeader(const MsgHeader& from);

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHeader& default_instance();

  void Swap(MsgHeader* other);

  // implements Message ----------------------------------------------

  MsgHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mpaxos.MsgType msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::mpaxos::MsgType msg_type() const;
  inline void set_msg_type(::mpaxos::MsgType value);

  // required uint32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // required uint64 slot_id = 3;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  inline ::google::protobuf::uint64 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpaxos.MsgHeader)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int msg_type_;
  ::google::protobuf::uint32 node_id_;
  ::google::protobuf::uint64 slot_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static MsgHeader* default_instance_;
};
// -------------------------------------------------------------------

class PropValue : public ::google::protobuf::Message {
 public:
  PropValue();
  virtual ~PropValue();

  PropValue(const PropValue& from);

  inline PropValue& operator=(const PropValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropValue& default_instance();

  void Swap(PropValue* other);

  // implements Message ----------------------------------------------

  PropValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropValue& from);
  void MergeFrom(const PropValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mpaxos.PropValue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static PropValue* default_instance_;
};
// -------------------------------------------------------------------

class MsgPrepare : public ::google::protobuf::Message {
 public:
  MsgPrepare();
  virtual ~MsgPrepare();

  MsgPrepare(const MsgPrepare& from);

  inline MsgPrepare& operator=(const MsgPrepare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPrepare& default_instance();

  void Swap(MsgPrepare* other);

  // implements Message ----------------------------------------------

  MsgPrepare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPrepare& from);
  void MergeFrom(const MsgPrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mpaxos.MsgHeader msg_header = 1;
  inline bool has_msg_header() const;
  inline void clear_msg_header();
  static const int kMsgHeaderFieldNumber = 1;
  inline const ::mpaxos::MsgHeader& msg_header() const;
  inline ::mpaxos::MsgHeader* mutable_msg_header();
  inline ::mpaxos::MsgHeader* release_msg_header();
  inline void set_allocated_msg_header(::mpaxos::MsgHeader* msg_header);

  // required uint64 ballot_id = 2;
  inline bool has_ballot_id() const;
  inline void clear_ballot_id();
  static const int kBallotIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ballot_id() const;
  inline void set_ballot_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mpaxos.MsgPrepare)
 private:
  inline void set_has_msg_header();
  inline void clear_has_msg_header();
  inline void set_has_ballot_id();
  inline void clear_has_ballot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mpaxos::MsgHeader* msg_header_;
  ::google::protobuf::uint64 ballot_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static MsgPrepare* default_instance_;
};
// -------------------------------------------------------------------

class MsgAckPrepare : public ::google::protobuf::Message {
 public:
  MsgAckPrepare();
  virtual ~MsgAckPrepare();

  MsgAckPrepare(const MsgAckPrepare& from);

  inline MsgAckPrepare& operator=(const MsgAckPrepare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAckPrepare& default_instance();

  void Swap(MsgAckPrepare* other);

  // implements Message ----------------------------------------------

  MsgAckPrepare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAckPrepare& from);
  void MergeFrom(const MsgAckPrepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mpaxos.MsgHeader msg_header = 1;
  inline bool has_msg_header() const;
  inline void clear_msg_header();
  static const int kMsgHeaderFieldNumber = 1;
  inline const ::mpaxos::MsgHeader& msg_header() const;
  inline ::mpaxos::MsgHeader* mutable_msg_header();
  inline ::mpaxos::MsgHeader* release_msg_header();
  inline void set_allocated_msg_header(::mpaxos::MsgHeader* msg_header);

  // required uint64 ballot_id = 2;
  inline bool has_ballot_id() const;
  inline void clear_ballot_id();
  static const int kBallotIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ballot_id() const;
  inline void set_ballot_id(::google::protobuf::uint64 value);

  // required bool reply = 3;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline bool reply() const;
  inline void set_reply(bool value);

  // required uint64 max_ballot_id = 4;
  inline bool has_max_ballot_id() const;
  inline void clear_max_ballot_id();
  static const int kMaxBallotIdFieldNumber = 4;
  inline ::google::protobuf::uint64 max_ballot_id() const;
  inline void set_max_ballot_id(::google::protobuf::uint64 value);

  // optional .mpaxos.PropValue max_prop_value = 5;
  inline bool has_max_prop_value() const;
  inline void clear_max_prop_value();
  static const int kMaxPropValueFieldNumber = 5;
  inline const ::mpaxos::PropValue& max_prop_value() const;
  inline ::mpaxos::PropValue* mutable_max_prop_value();
  inline ::mpaxos::PropValue* release_max_prop_value();
  inline void set_allocated_max_prop_value(::mpaxos::PropValue* max_prop_value);

  // @@protoc_insertion_point(class_scope:mpaxos.MsgAckPrepare)
 private:
  inline void set_has_msg_header();
  inline void clear_has_msg_header();
  inline void set_has_ballot_id();
  inline void clear_has_ballot_id();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_max_ballot_id();
  inline void clear_has_max_ballot_id();
  inline void set_has_max_prop_value();
  inline void clear_has_max_prop_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mpaxos::MsgHeader* msg_header_;
  ::google::protobuf::uint64 ballot_id_;
  ::google::protobuf::uint64 max_ballot_id_;
  ::mpaxos::PropValue* max_prop_value_;
  bool reply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static MsgAckPrepare* default_instance_;
};
// -------------------------------------------------------------------

class MsgAccept : public ::google::protobuf::Message {
 public:
  MsgAccept();
  virtual ~MsgAccept();

  MsgAccept(const MsgAccept& from);

  inline MsgAccept& operator=(const MsgAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAccept& default_instance();

  void Swap(MsgAccept* other);

  // implements Message ----------------------------------------------

  MsgAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAccept& from);
  void MergeFrom(const MsgAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mpaxos.MsgHeader msg_header = 1;
  inline bool has_msg_header() const;
  inline void clear_msg_header();
  static const int kMsgHeaderFieldNumber = 1;
  inline const ::mpaxos::MsgHeader& msg_header() const;
  inline ::mpaxos::MsgHeader* mutable_msg_header();
  inline ::mpaxos::MsgHeader* release_msg_header();
  inline void set_allocated_msg_header(::mpaxos::MsgHeader* msg_header);

  // required uint64 ballot_id = 2;
  inline bool has_ballot_id() const;
  inline void clear_ballot_id();
  static const int kBallotIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ballot_id() const;
  inline void set_ballot_id(::google::protobuf::uint64 value);

  // required .mpaxos.PropValue prop_value = 3;
  inline bool has_prop_value() const;
  inline void clear_prop_value();
  static const int kPropValueFieldNumber = 3;
  inline const ::mpaxos::PropValue& prop_value() const;
  inline ::mpaxos::PropValue* mutable_prop_value();
  inline ::mpaxos::PropValue* release_prop_value();
  inline void set_allocated_prop_value(::mpaxos::PropValue* prop_value);

  // @@protoc_insertion_point(class_scope:mpaxos.MsgAccept)
 private:
  inline void set_has_msg_header();
  inline void clear_has_msg_header();
  inline void set_has_ballot_id();
  inline void clear_has_ballot_id();
  inline void set_has_prop_value();
  inline void clear_has_prop_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mpaxos::MsgHeader* msg_header_;
  ::google::protobuf::uint64 ballot_id_;
  ::mpaxos::PropValue* prop_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static MsgAccept* default_instance_;
};
// -------------------------------------------------------------------

class MsgAckAccept : public ::google::protobuf::Message {
 public:
  MsgAckAccept();
  virtual ~MsgAckAccept();

  MsgAckAccept(const MsgAckAccept& from);

  inline MsgAckAccept& operator=(const MsgAckAccept& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAckAccept& default_instance();

  void Swap(MsgAckAccept* other);

  // implements Message ----------------------------------------------

  MsgAckAccept* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAckAccept& from);
  void MergeFrom(const MsgAckAccept& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mpaxos.MsgHeader msg_header = 1;
  inline bool has_msg_header() const;
  inline void clear_msg_header();
  static const int kMsgHeaderFieldNumber = 1;
  inline const ::mpaxos::MsgHeader& msg_header() const;
  inline ::mpaxos::MsgHeader* mutable_msg_header();
  inline ::mpaxos::MsgHeader* release_msg_header();
  inline void set_allocated_msg_header(::mpaxos::MsgHeader* msg_header);

  // required uint64 ballot_id = 2;
  inline bool has_ballot_id() const;
  inline void clear_ballot_id();
  static const int kBallotIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ballot_id() const;
  inline void set_ballot_id(::google::protobuf::uint64 value);

  // required bool reply = 3;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline bool reply() const;
  inline void set_reply(bool value);

  // @@protoc_insertion_point(class_scope:mpaxos.MsgAckAccept)
 private:
  inline void set_has_msg_header();
  inline void clear_has_msg_header();
  inline void set_has_ballot_id();
  inline void clear_has_ballot_id();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mpaxos::MsgHeader* msg_header_;
  ::google::protobuf::uint64 ballot_id_;
  bool reply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mpaxos_2eproto();
  friend void protobuf_AssignDesc_mpaxos_2eproto();
  friend void protobuf_ShutdownFile_mpaxos_2eproto();

  void InitAsDefaultInstance();
  static MsgAckAccept* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgHeader

// required .mpaxos.MsgType msg_type = 1;
inline bool MsgHeader::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHeader::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHeader::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHeader::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::mpaxos::MsgType MsgHeader::msg_type() const {
  return static_cast< ::mpaxos::MsgType >(msg_type_);
}
inline void MsgHeader::set_msg_type(::mpaxos::MsgType value) {
  assert(::mpaxos::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// required uint32 node_id = 2;
inline bool MsgHeader::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHeader::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHeader::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHeader::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 MsgHeader::node_id() const {
  return node_id_;
}
inline void MsgHeader::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
}

// required uint64 slot_id = 3;
inline bool MsgHeader::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHeader::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHeader::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHeader::clear_slot_id() {
  slot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_slot_id();
}
inline ::google::protobuf::uint64 MsgHeader::slot_id() const {
  return slot_id_;
}
inline void MsgHeader::set_slot_id(::google::protobuf::uint64 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// -------------------------------------------------------------------

// PropValue

// required uint64 id = 1;
inline bool PropValue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropValue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropValue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropValue::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PropValue::id() const {
  return id_;
}
inline void PropValue::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string data = 2;
inline bool PropValue::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropValue::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropValue::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PropValue::data() const {
  return *data_;
}
inline void PropValue::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PropValue::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PropValue::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropValue::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PropValue::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropValue::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsgPrepare

// required .mpaxos.MsgHeader msg_header = 1;
inline bool MsgPrepare::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPrepare::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPrepare::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPrepare::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
inline const ::mpaxos::MsgHeader& MsgPrepare::msg_header() const {
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
inline ::mpaxos::MsgHeader* MsgPrepare::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) msg_header_ = new ::mpaxos::MsgHeader;
  return msg_header_;
}
inline ::mpaxos::MsgHeader* MsgPrepare::release_msg_header() {
  clear_has_msg_header();
  ::mpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
inline void MsgPrepare::set_allocated_msg_header(::mpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
}

// required uint64 ballot_id = 2;
inline bool MsgPrepare::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPrepare::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPrepare::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPrepare::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
inline ::google::protobuf::uint64 MsgPrepare::ballot_id() const {
  return ballot_id_;
}
inline void MsgPrepare::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
}

// -------------------------------------------------------------------

// MsgAckPrepare

// required .mpaxos.MsgHeader msg_header = 1;
inline bool MsgAckPrepare::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAckPrepare::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAckPrepare::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAckPrepare::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
inline const ::mpaxos::MsgHeader& MsgAckPrepare::msg_header() const {
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAckPrepare::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) msg_header_ = new ::mpaxos::MsgHeader;
  return msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAckPrepare::release_msg_header() {
  clear_has_msg_header();
  ::mpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
inline void MsgAckPrepare::set_allocated_msg_header(::mpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
}

// required uint64 ballot_id = 2;
inline bool MsgAckPrepare::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAckPrepare::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAckPrepare::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAckPrepare::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
inline ::google::protobuf::uint64 MsgAckPrepare::ballot_id() const {
  return ballot_id_;
}
inline void MsgAckPrepare::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
}

// required bool reply = 3;
inline bool MsgAckPrepare::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgAckPrepare::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgAckPrepare::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgAckPrepare::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
inline bool MsgAckPrepare::reply() const {
  return reply_;
}
inline void MsgAckPrepare::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
}

// required uint64 max_ballot_id = 4;
inline bool MsgAckPrepare::has_max_ballot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgAckPrepare::set_has_max_ballot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgAckPrepare::clear_has_max_ballot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgAckPrepare::clear_max_ballot_id() {
  max_ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_max_ballot_id();
}
inline ::google::protobuf::uint64 MsgAckPrepare::max_ballot_id() const {
  return max_ballot_id_;
}
inline void MsgAckPrepare::set_max_ballot_id(::google::protobuf::uint64 value) {
  set_has_max_ballot_id();
  max_ballot_id_ = value;
}

// optional .mpaxos.PropValue max_prop_value = 5;
inline bool MsgAckPrepare::has_max_prop_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgAckPrepare::set_has_max_prop_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgAckPrepare::clear_has_max_prop_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgAckPrepare::clear_max_prop_value() {
  if (max_prop_value_ != NULL) max_prop_value_->::mpaxos::PropValue::Clear();
  clear_has_max_prop_value();
}
inline const ::mpaxos::PropValue& MsgAckPrepare::max_prop_value() const {
  return max_prop_value_ != NULL ? *max_prop_value_ : *default_instance_->max_prop_value_;
}
inline ::mpaxos::PropValue* MsgAckPrepare::mutable_max_prop_value() {
  set_has_max_prop_value();
  if (max_prop_value_ == NULL) max_prop_value_ = new ::mpaxos::PropValue;
  return max_prop_value_;
}
inline ::mpaxos::PropValue* MsgAckPrepare::release_max_prop_value() {
  clear_has_max_prop_value();
  ::mpaxos::PropValue* temp = max_prop_value_;
  max_prop_value_ = NULL;
  return temp;
}
inline void MsgAckPrepare::set_allocated_max_prop_value(::mpaxos::PropValue* max_prop_value) {
  delete max_prop_value_;
  max_prop_value_ = max_prop_value;
  if (max_prop_value) {
    set_has_max_prop_value();
  } else {
    clear_has_max_prop_value();
  }
}

// -------------------------------------------------------------------

// MsgAccept

// required .mpaxos.MsgHeader msg_header = 1;
inline bool MsgAccept::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAccept::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAccept::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAccept::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
inline const ::mpaxos::MsgHeader& MsgAccept::msg_header() const {
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAccept::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) msg_header_ = new ::mpaxos::MsgHeader;
  return msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAccept::release_msg_header() {
  clear_has_msg_header();
  ::mpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
inline void MsgAccept::set_allocated_msg_header(::mpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
}

// required uint64 ballot_id = 2;
inline bool MsgAccept::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAccept::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAccept::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAccept::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
inline ::google::protobuf::uint64 MsgAccept::ballot_id() const {
  return ballot_id_;
}
inline void MsgAccept::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
}

// required .mpaxos.PropValue prop_value = 3;
inline bool MsgAccept::has_prop_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgAccept::set_has_prop_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgAccept::clear_has_prop_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgAccept::clear_prop_value() {
  if (prop_value_ != NULL) prop_value_->::mpaxos::PropValue::Clear();
  clear_has_prop_value();
}
inline const ::mpaxos::PropValue& MsgAccept::prop_value() const {
  return prop_value_ != NULL ? *prop_value_ : *default_instance_->prop_value_;
}
inline ::mpaxos::PropValue* MsgAccept::mutable_prop_value() {
  set_has_prop_value();
  if (prop_value_ == NULL) prop_value_ = new ::mpaxos::PropValue;
  return prop_value_;
}
inline ::mpaxos::PropValue* MsgAccept::release_prop_value() {
  clear_has_prop_value();
  ::mpaxos::PropValue* temp = prop_value_;
  prop_value_ = NULL;
  return temp;
}
inline void MsgAccept::set_allocated_prop_value(::mpaxos::PropValue* prop_value) {
  delete prop_value_;
  prop_value_ = prop_value;
  if (prop_value) {
    set_has_prop_value();
  } else {
    clear_has_prop_value();
  }
}

// -------------------------------------------------------------------

// MsgAckAccept

// required .mpaxos.MsgHeader msg_header = 1;
inline bool MsgAckAccept::has_msg_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAckAccept::set_has_msg_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAckAccept::clear_has_msg_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAckAccept::clear_msg_header() {
  if (msg_header_ != NULL) msg_header_->::mpaxos::MsgHeader::Clear();
  clear_has_msg_header();
}
inline const ::mpaxos::MsgHeader& MsgAckAccept::msg_header() const {
  return msg_header_ != NULL ? *msg_header_ : *default_instance_->msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAckAccept::mutable_msg_header() {
  set_has_msg_header();
  if (msg_header_ == NULL) msg_header_ = new ::mpaxos::MsgHeader;
  return msg_header_;
}
inline ::mpaxos::MsgHeader* MsgAckAccept::release_msg_header() {
  clear_has_msg_header();
  ::mpaxos::MsgHeader* temp = msg_header_;
  msg_header_ = NULL;
  return temp;
}
inline void MsgAckAccept::set_allocated_msg_header(::mpaxos::MsgHeader* msg_header) {
  delete msg_header_;
  msg_header_ = msg_header;
  if (msg_header) {
    set_has_msg_header();
  } else {
    clear_has_msg_header();
  }
}

// required uint64 ballot_id = 2;
inline bool MsgAckAccept::has_ballot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAckAccept::set_has_ballot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAckAccept::clear_has_ballot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAckAccept::clear_ballot_id() {
  ballot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ballot_id();
}
inline ::google::protobuf::uint64 MsgAckAccept::ballot_id() const {
  return ballot_id_;
}
inline void MsgAckAccept::set_ballot_id(::google::protobuf::uint64 value) {
  set_has_ballot_id();
  ballot_id_ = value;
}

// required bool reply = 3;
inline bool MsgAckAccept::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgAckAccept::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgAckAccept::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgAckAccept::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
inline bool MsgAckAccept::reply() const {
  return reply_;
}
inline void MsgAckAccept::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpaxos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mpaxos::MsgType>() {
  return ::mpaxos::MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mpaxos_2eproto__INCLUDED
